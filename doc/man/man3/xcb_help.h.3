.TH "xcb_help.h" 3 "Sun Nov 30 2014" "howm" \" -*- nroff -*-
.ad l
.nh
.SH NAME
xcb_help.h \- 
.PP
howm  

.SH SYNOPSIS
.br
.PP
\fC#include 'client\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB_NET_WM_STATE_REMOVE\fP   0"
.br
.ti -1c
.RI "#define \fB_NET_WM_STATE_ADD\fP   1"
.br
.ti -1c
.RI "#define \fB_NET_WM_STATE_TOGGLE\fP   2"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBnet_atom_enum\fP { \fBNET_WM_STATE_FULLSCREEN\fP, \fBNET_SUPPORTED\fP, \fBNET_WM_STATE\fP, \fBNET_ACTIVE_WINDOW\fP }"
.br
.ti -1c
.RI "enum \fBwm_atom_enum\fP { \fBWM_DELETE_WINDOW\fP, \fBWM_PROTOCOLS\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBelevate_window\fP (xcb_window_t win)"
.br
.RI "\fIMove a window to the front of all the other windows\&. \fP"
.ti -1c
.RI "void \fBmove_resize\fP (xcb_window_t win, uint16_t x, uint16_t y, uint16_t w, uint16_t h)"
.br
.RI "\fIChange the dimensions and location of a window (win)\&. \fP"
.ti -1c
.RI "void \fBset_border_width\fP (xcb_window_t win, uint16_t w)"
.br
.RI "\fISets the width of the borders around a window (win)\&. \fP"
.ti -1c
.RI "void \fBget_atoms\fP (const char **names, xcb_atom_t *atoms)"
.br
.RI "\fIRequest all of the atoms that howm supports\&. \fP"
.ti -1c
.RI "void \fBcheck_other_wm\fP (void)"
.br
.RI "\fITry to detect if another WM exists\&. \fP"
.ti -1c
.RI "void \fBfocus_window\fP (xcb_window_t win)"
.br
.RI "\fIFocus the given window, so long as it isn't already focused\&. \fP"
.ti -1c
.RI "void \fBgrab_buttons\fP (\fBClient\fP *c)"
.br
.RI "\fIMake a client listen for button press events\&. \fP"
.ti -1c
.RI "void \fBdelete_win\fP (xcb_window_t win)"
.br
.RI "\fIAsk XCB to delete a window\&. \fP"
.ti -1c
.RI "void \fBsetup_ewmh\fP (void)"
.br
.RI "\fICreate the EWMH connection, request all of the atoms and set some sensible defaults for them\&. \fP"
.ti -1c
.RI "void \fBewmh_process_wm_state\fP (\fBClient\fP *c, xcb_atom_t a, int action)"
.br
.RI "\fIHandle client messages that are related to WM_STATE\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
howm 


.PP
\fBAuthor:\fP
.RS 4
Harvey Hunt
.RE
.PP
\fBDate:\fP
.RS 4
2014 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define _NET_WM_STATE_ADD   1"
The add action for a WM_STATE request\&. 
.SS "#define _NET_WM_STATE_REMOVE   0"
The remove action for a WM_STATE request\&. 
.SS "#define _NET_WM_STATE_TOGGLE   2"
The toggle action for a WM_STATE request\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBnet_atom_enum\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINET_WM_STATE_FULLSCREEN \fP\fP
.TP
\fB\fINET_SUPPORTED \fP\fP
.TP
\fB\fINET_WM_STATE \fP\fP
.TP
\fB\fINET_ACTIVE_WINDOW \fP\fP
.SS "enum \fBwm_atom_enum\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIWM_DELETE_WINDOW \fP\fP
.TP
\fB\fIWM_PROTOCOLS \fP\fP
.SH "Function Documentation"
.PP 
.SS "void check_other_wm (void)"

.PP
Try to detect if another WM exists\&. If another WM exists (this can be seen by whether it has registered itself with the X11 server) then howm will exit\&. 
.SS "void delete_win (xcb_window_twin)"

.PP
Ask XCB to delete a window\&. 
.PP
\fBParameters:\fP
.RS 4
\fIwin\fP The window to be deleted\&. 
.RE
.PP

.SS "void elevate_window (xcb_window_twin)"

.PP
Move a window to the front of all the other windows\&. 
.PP
\fBParameters:\fP
.RS 4
\fIwin\fP The window to be moved\&. 
.RE
.PP

.SS "void ewmh_process_wm_state (\fBClient\fP *c, xcb_atom_ta, intaction)"

.PP
Handle client messages that are related to WM_STATE\&. TODO: Add more WM_STATE hints\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The client that is to have its WM_STATE modified\&. 
.br
\fIa\fP The atom representing which WM_STATE hint should be modified\&. 
.br
\fIaction\fP Whether to remove, add or toggle the WM_STATE hint\&. 
.RE
.PP

.SS "void focus_window (xcb_window_twin)"

.PP
Focus the given window, so long as it isn't already focused\&. 
.PP
\fBParameters:\fP
.RS 4
\fIwin\fP A window that belongs to a client being managed by howm\&. 
.RE
.PP

.SS "void get_atoms (const char **names, xcb_atom_t *atoms)"

.PP
Request all of the atoms that howm supports\&. 
.PP
\fBParameters:\fP
.RS 4
\fInames\fP The names of the atoms to be fetched\&. 
.br
\fIatoms\fP Where the returned atoms will be stored\&. 
.RE
.PP

.SS "void grab_buttons (\fBClient\fP *c)"

.PP
Make a client listen for button press events\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The client that needs to listen for button presses\&. 
.RE
.PP

.SS "void move_resize (xcb_window_twin, uint16_tx, uint16_ty, uint16_tw, uint16_th)"

.PP
Change the dimensions and location of a window (win)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIwin\fP The window upon which the operations should be performed\&. 
.br
\fIx\fP The new x location of the top left corner\&. 
.br
\fIy\fP The new y location of the top left corner\&. 
.br
\fIw\fP The new width of the window\&. 
.br
\fIh\fP The new height of the window\&. 
.RE
.PP

.SS "void set_border_width (xcb_window_twin, uint16_tw)"

.PP
Sets the width of the borders around a window (win)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIwin\fP The window that will have its border width changed\&. 
.br
\fIw\fP The new width of the window's border\&. 
.RE
.PP

.SS "void setup_ewmh (void)"

.PP
Create the EWMH connection, request all of the atoms and set some sensible defaults for them\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for howm from the source code\&.
